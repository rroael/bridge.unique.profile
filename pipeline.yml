# Check our guides at https://confluence.atlassian.com/x/5Q4SMw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: mcr.microsoft.com/dotnet/sdk:5.0

pipelines:
  branches:
    master:
      - step:
          name: Valid Variables
          caches:
            - dotnetcore
          script: # Modify the commands below to build your repository.-
            - apt-get update
            - apt-get  install -y jq
            - source ./prod-api-pipeline.sh
            - env | sort
      - step:
          name: Valid Variables
          caches:
            - dotnetcore
          script: # Modify the commands below to build your repository.-
            - apt-get update
            - apt-get  install -y jq
            - source ./prod-api-pipeline.sh
            - env | sort
      - step:
          name: Tests
          caches:
            - dotnetcore
          script: # Modify the commands below to build your repository.
            - export PROJECT_NAME=Bridge.Unique.Profile
            - export TEST_NAME=Bridge.Unique.Profile.Domain.Test
            #- dotnet test $PROJECT_NAME/$TEST_NAME

      - step:
          name: Docker Build & Push ECR
          image: atlassian/pipelines-awscli
          script: # Modify the commands below to build your repository.
            - aws --version
            - apk add jq
            - source ./prod-api-pipeline.sh
            - env | sort
            - aws s3 cp s3://webinnovation/certificates/mycompany.com.pfx "./Bridge.Unique.Profile/mycompany.com.pfx"
            - ls Bridge.Unique.Profile
            - cd Bridge.Unique.Profile && docker build --build-arg BUILD_DATETIME=$(date +%FT%TZ) -t $IMAGE_NAME .
            - pipe: atlassian/aws-ecr-push-image:1.1.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                IMAGE_NAME: $IMAGE_NAME
                TAGS: $IMAGE_VERSION
          services:
            - docker

      - step:
          name: ECS Restart
          image: atlassian/pipelines-awscli
          script: # Modify the commands below to build your repository.
            - source ./prod-api-pipeline.sh
            - env | sort
            - aws ecs update-service --force-new-deployment --cluster $CLUSTER_NAME --service $SERVICE_NAME
          services:
            - docker

      - step:
          name: Delete Images UNTAGGED
          image: atlassian/pipelines-awscli
          script: # Modify the commands below to build your repository.
            - apk add jq
            - source ./prod-api-pipeline.sh
            - env | sort
            - export IMAGES_TO_DELETE=$( aws ecr list-images --region $AWS_DEFAULT_REGION --repository-name $ECR_REPO --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
            - aws ecr batch-delete-image --region $AWS_DEFAULT_REGION --repository-name $ECR_REPO --image-ids "$IMAGES_TO_DELETE" || true
          services:
            - docker
    hom:
      - step:
          name: Valid Variables
          caches:
            - dotnetcore
          script: # Modify the commands below to build your repository.-
            - apt-get update
            - apt-get  install -y jq
            - source ./hom-api-pipeline.sh
            - env | sort
      - step:
          name: Valid Variables
          caches:
            - dotnetcore
          script: # Modify the commands below to build your repository.-
            - apt-get update
            - apt-get  install -y jq
            - source ./hom-api-pipeline.sh
            - env | sort
      - step:
          name: Tests
          caches:
            - dotnetcore
          script: # Modify the commands below to build your repository.
            - export PROJECT_NAME=Bridge.Unique.Profile
            - export TEST_NAME=Bridge.Unique.Profile.Domain.Test
            #- dotnet test $PROJECT_NAME/$TEST_NAME

      - step:
          name: Docker Build & Push ECR
          image: atlassian/pipelines-awscli
          script: # Modify the commands below to build your repository.
            - aws --version
            - apk add jq
            - source ./hom-api-pipeline.sh
            - env | sort
            - aws s3 cp s3://webinnovation/certificates/mycompany.com.pfx "./Bridge.Unique.Profile/mycompany.com.pfx"
            - ls Bridge.Unique.Profile
            - cd Bridge.Unique.Profile && docker build --build-arg BUILD_DATETIME=$(date +%FT%TZ) -t $IMAGE_NAME .
            - pipe: atlassian/aws-ecr-push-image:1.1.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                IMAGE_NAME: $IMAGE_NAME
                TAGS: $IMAGE_VERSION
          services:
            - docker

      - step:
          name: ECS Restart
          image: atlassian/pipelines-awscli
          script: # Modify the commands below to build your repository.
            - source ./hom-api-pipeline.sh
            - env | sort
            - aws ecs update-service --force-new-deployment --cluster $CLUSTER_NAME --service $SERVICE_NAME
          services:
            - docker

      - step:
          name: Delete Images UNTAGGED
          image: atlassian/pipelines-awscli
          script: # Modify the commands below to build your repository.
            - apk add jq
            - source ./hom-api-pipeline.sh
            - env | sort
            - export IMAGES_TO_DELETE=$( aws ecr list-images --region $AWS_DEFAULT_REGION --repository-name $ECR_REPO --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
            - aws ecr batch-delete-image --region $AWS_DEFAULT_REGION --repository-name $ECR_REPO --image-ids "$IMAGES_TO_DELETE" || true
          services:
            - docker

definitions:
  services:
    docker:
      memory: 2048